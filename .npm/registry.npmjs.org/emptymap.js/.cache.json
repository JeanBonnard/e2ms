{"_id":"emptymap.js","_rev":"2-f161313def7e45389e35aa3eb92b86c5","name":"emptymap.js","description":"A module that helps in navigation of map like pan, zoom and rotation but does nothing itself.","dist-tags":{"latest":"1.0.0"},"versions":{"0.0.0":{"name":"emptymap.js","version":"0.0.0","description":"A module that helps in navigation of map like pan, zoom and rotation but does nothing itself.","main":"emptymap.js","scripts":{"test":"mocha test/test.js","build-debug":"browserify emptymap.js --debug --standalone EmptyMap | exorcist dist/emptymap.js.map > dist/emptymap.js","build-min":"browserify emptymap.js --standalone EmptyMap | uglifyjs -c -m > dist/emptymap.min.js","build":"npm run build-debug && npm run build-min"},"repository":{"type":"git","url":"https://github.com/gagan-bansal/emptymap.js"},"keywords":["maps","framework","svg","vector","tiles","spherical mercator","web mercator","navigation","pan","zoom","rotation"],"author":{"name":"Gagan Bansal","email":"gaganbansal123@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/gagan-bansal/emptymap.js/issues"},"homepage":"https://github.com/gagan-bansal/emptymap.js","devDependencies":{"browserify":"^8.1.1","chai":"^3.2.0","exorcist":"^0.1.6","mocha":"^2.1.0","uglify-js":"^2.4.16"},"dependencies":{"transformatrix":"^1.1.1"},"gitHead":"dea9ed43ebe5f1aee00dc007ed74dc1e9add9daf","_id":"emptymap.js@0.0.0","_shasum":"d087c8a63e92457a1384baecb4f3ad88935bc475","_from":".","_npmVersion":"2.1.16","_nodeVersion":"0.10.35","_npmUser":{"name":"gagan-bansal","email":"gaganbansal123@gmail.com"},"maintainers":[{"name":"gagan-bansal","email":"gaganbansal123@gmail.com"}],"dist":{"shasum":"d087c8a63e92457a1384baecb4f3ad88935bc475","tarball":"https://registry.npmjs.org/emptymap.js/-/emptymap.js-0.0.0.tgz"},"directories":{}},"1.0.0":{"name":"emptymap.js","version":"1.0.0","description":"A module that helps in navigation of map like pan, zoom and rotation but does nothing itself.","main":"emptymap.js","scripts":{"test":"mocha test/test.js","build-debug":"browserify emptymap.js --debug --standalone EmptyMap | exorcist dist/emptymap.js.map > dist/emptymap.js","build-min":"browserify emptymap.js --standalone EmptyMap | uglifyjs -c -m > dist/emptymap.min.js","build":"npm run build-debug && npm run build-min"},"repository":{"type":"git","url":"git+https://github.com/gagan-bansal/emptymap.js.git"},"keywords":["maps","framework","svg","vector","tiles","spherical mercator","web mercator","navigation","pan","zoom","rotation"],"author":{"name":"Gagan Bansal","email":"gaganbansal123@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/gagan-bansal/emptymap.js/issues"},"homepage":"https://github.com/gagan-bansal/emptymap.js","devDependencies":{"browserify":"^8.1.1","chai":"^3.2.0","chai-deep-closeto":"^0.1.1","exorcist":"^0.1.6","mocha":"^2.1.0","uglify-js":"^2.4.16"},"dependencies":{"transformatrix":"^1.1.1"},"gitHead":"ea7edff3680f38058fff1f61e1d7f20872e636e8","_id":"emptymap.js@1.0.0","_shasum":"9e7810ce662edf510b7a59047d5599a40bf77afe","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.3.0","_npmUser":{"name":"gagan-bansal","email":"gaganbansal123@gmail.com"},"maintainers":[{"name":"gagan-bansal","email":"gaganbansal123@gmail.com"}],"dist":{"shasum":"9e7810ce662edf510b7a59047d5599a40bf77afe","tarball":"https://registry.npmjs.org/emptymap.js/-/emptymap.js-1.0.0.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/emptymap.js-1.0.0.tgz_1464526575101_0.14907535025849938"},"directories":{}}},"readme":"# emptymap.js\nA module that helps in navigation of map like pan, zoom and rotation but does nothing itself.\n\nemptymap.js takes advantage of CSS/SVG transform property. If you render your geojson data (spatial data) on HTML page in form of SVG then this module can easily help in pan, zoom and rotate the SVG map. On SVG drag, pinch and rotate this module calculate the transformation matrix value to be applied to SVG to take effect of the events. The module also calculate the transformation matrix for div that contains map tiles as img tag.  \n\n## installation\n```\nnpm install emptymap.js\n```\n \n## usage & API\nTo initiate the instance we need to pass the map SVG/div size and projection extent. In case of spherical (web) mercator projection no need to pass the extent as this is default projection.\n```javascript \nvar EmptyMap = require('emptymap.js');\n  size = {width: 714, height: 400},\n  view = {\n    \"center\":[-9655821.34064295,4238014.557249293],\n    \"zoom\":4,\n    \"rotation\":-15\n  }, \n  em;\nem = new EmptyMap(size); \n//set the initial view\nem.setView(veiw, function(err,state) {\n  // state has the transformation matrices\n  if(err) {\n    console.log(err);\n    return;\n  }\n  //get SVG map layer (where id='svgmap')\n  var svgLayer = document.getElemetnById('svgmap');\n  svgLayer.setAttribute('transform', 'matrix('+state.matrix.join(', ')+')');\n  //get map tile layer (where id='tilemap')\n  var tileLayer = document.getElementById('tilemap');\n  tileLayer.style.transform = 'matrix('+ state.tileMatrix.join(',') + ')';\n  // and of course you need to load the tiles for this view\n});\n\n// now lets pinch and rotate the map\nem.scaleRotate(\n  {\n    center: [300, 200],\n    rotation: 30, // in degree clock wise positive \n    factor: 2, // scale (pinch) factor\n  },\n  function(err,state) {\n    if(err) {\n      console.log(err);\n      return;\n    }\n    //get SVG map layer (where id='svgmap')\n    var svgLayer = document.getElemetnById('svgmap');\n    svgLayer.setAttribute('transform', 'matrix('+state.matrix.join(', ')+')');\n    //get map tile layer (where id='tilemap')\n    var tileLayer = document.getElementById('tilemap');\n    tileLayer.style.transform = 'matrix('+ state.tileMatrix.join(',') + ')';\n    // and again you need to load the tiles for the changed view\n  }\n);\n```\n#### API\n\n#####constructor(viewportSize [,options])\n\nCreates emptymap.js instance with maps div's `viewportSize` and other `otpions`\n\n`viewportSize` is object with maps div width and height in pixel\n```\n{ \n  width: number\n  height: number\n}\n```\n\n`options:` different options are as follows: \n* projExtent: projection extent\n* tileSize: map tile size\n* view: initial map view i.e. center, zoom/resolution and rotation\n* callback: callback function that handle the matrix values after view is set\n\n`projExtent` projection extent default spherical mercator extent\n```\n  projExt: { \n    left: number \n    right: number\n    bottom: number\n    top: number\n  }\n```\n`tileSize`  i.e. whole projection extent should fit into one square tile, default is 256\n\n`view` object with center, zoom/resolution and rotation\n```\nview: {\n  cneter: [x,y], // default [0,0]\n  zoom: integer, // default is 0\n  resolution: numbe, // zoom takes precedence over resolution \n                     // if both are present\n  rotation: number, // in degree default is 0\n}\n```\n`callback` function that should accept `error` and current map `state`\nwhile state has following values:\n```\n{\n  matrix: array of 6 transformation coefficients for svg map\n  tileMatrix: array of 6 transformation coefficient for tile map\n  map: reference the map itself\n}\n```\n\ncallback usage:\n```javascript\ncallback: function(error , state) {\n  if(error) {\n    consol.log(error);\n    return;\n  }\n  // map state can be set as\n  //get SVG map layer (where id='svgmap')\n  var svgLayer = document.getElemetnById('svgmap');\n  svgLayer.setAttribute('transform', 'matrix('+state.matrix.join(', ')+')');\n  //get map tile layer (where id='tilemap')\n  var tileLayer = document.getElementById('tilemap');\n  tileLayer.style.transform = 'matrix('+ state.tileMatrix.join(',') + ')';\n}\n```\n\n**.setView(view [, callback, scope])** \n\nSets a view to the map whereas parameters are:\n* view: as explained above\n* callback: callback function as explained in constructor \n* scope: `this` for callback function\n\n**.move(delta [, callback, scope])**\n\nPans the map by given viewport's delta pixel values for x and y direction. `parameters` are:\n* delta: {deltaX: number, deltaY: number}\n  * deltaX: viewport pixels in x direction\n  * deltaY: viewport pixels in y direction\n* callback: callback function as explained in constructor \n* scope: `this` for callback function\n\n**.scaleRotate(params [, callback, scope])**\n\nScale and rotate the map, `params` are:\n* center: [x, y] center position for scale/rotation on viewport in pixels. Default value is center of viewport.\n* factor: float scale factor to zoom in/out the map. Default is 1.\n* rotation: float in degrees, clockwise positive. This is delta rotation to be applied to the map. Default value is 0 degree.\n* callback: callback function as explained in constructor \n* scope: `this` for callback function\n\n**.resetTileMatrix([callback, scope])**\n\nReset tile map matrix so that only rotation transformation is applied, as scale and pan would be null for tile map. This function can be called after every transition/event pan, pinch (scale) and rotatation. During transition/event tileMatrix can be applied to tile layer. Generally callback of this function should also check if tiles need to be loaded for current map state.\n* callback: callback function as explained in constructor \n* scope: `this` for callback function\n\n**.getCenter**\n\nReturns viewport center coordinates as an array of x and y in projected coordinate system.\n\n**.getResolution**\n\nReturns current resolution of the map.\n\n**.getRotation**\n\nReturns current rotation of the map in degree (clockwise positive)\n\n**.getZoom**\n\nReturns current zoom level of the map.\n\n**.getNearestZoom**\n\nWhen map state is at fractional zoom it returns the nearest non-fractional zoom value. \n\n**.getView**\n\nReturn current map state object as:\n```\n{\n  cetner: array of [x,y]\n  resolution: float\n  zoom: float\n  rotation: float in degrees (clockwise positive)\n}\n```\n\n**.getExtent**\n\nReturns viewport corner coordinates as an object:\n```\n{\n  ul: upper left projected coordinates,\n  ll: lower left projected coordinates,\n  lr: lower right projected coordinates,\n  ur: upper right projected coordinates\n}\n```\n\n**.getVewportBBox**\n\nRetruns viewport's BBox/MBR in projected coordinate system. Its different from map extent. Once map is rotated the viewport is not aligned to coordinate axis. Viewport's BBox should be aligned to coordinate axis. \n\n```\n{\n  left: projeceted x,\n  right: projected x,\n  bottom: projected y,\n  top: projected y\n}\n``` \n**.toLongLat([x,y])**\n\nConverts viewport pixel coordinates to maps projected coordinates ([x,y]).\n\n**.toViewport([x,y])**\n\nConverts maps projected coordinates to viewport pixel coordinates ([x,y]).\n\n**Note:** To set center, resolution/zoom and rotation use setView as:\n````javascript\nvar view = em.getView();\nview.rotation = 25;\nem.setView(view,function(error, state) {\n  if(error) {\n    console.log(errro);\n    return;\n  }\n  // set matrices to  required layers\n});\n```\n\n## developing\nOnce you run\n \n```npm install```\n\nthen for running test \n\n```npm run test```\n\nand to create build\n\n```npm run build```\n\n\n\n## license\nThis project is licensed under the terms of the MIT license.\n","maintainers":[{"name":"gagan-bansal","email":"gaganbansal123@gmail.com"}],"time":{"modified":"2016-05-29T12:56:15.578Z","created":"2015-07-30T04:45:10.171Z","0.0.0":"2015-07-30T04:45:10.171Z","1.0.0":"2016-05-29T12:56:15.578Z"},"homepage":"https://github.com/gagan-bansal/emptymap.js","keywords":["maps","framework","svg","vector","tiles","spherical mercator","web mercator","navigation","pan","zoom","rotation"],"repository":{"type":"git","url":"git+https://github.com/gagan-bansal/emptymap.js.git"},"author":{"name":"Gagan Bansal","email":"gaganbansal123@gmail.com"},"bugs":{"url":"https://github.com/gagan-bansal/emptymap.js/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"W/\"574ae6ef-2ef3\"","_lastModified":"Sun, 29 May 2016 12:56:15 GMT"}